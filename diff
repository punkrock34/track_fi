diff --git a/lib/core/contracts/services/secure_storage/i_currency_storage_service.dart b/lib/core/contracts/services/secure_storage/i_currency_storage_service.dart
index 27aee06..838c20a 100644
--- a/lib/core/contracts/services/secure_storage/i_currency_storage_service.dart
+++ b/lib/core/contracts/services/secure_storage/i_currency_storage_service.dart
@@ -1,5 +1,5 @@
 abstract class ICurrencyStorageService {
-  /// Get the user's base currency (defaults to 'GBP')
+  /// Get the user's base currency (defaults to 'RON')
   Future<String> getBaseCurrency();
   
   /// Set the user's base currency
diff --git a/lib/core/models/database/account.dart b/lib/core/models/database/account.dart
index 3e8c777..e75de30 100644
--- a/lib/core/models/database/account.dart
+++ b/lib/core/models/database/account.dart
@@ -4,11 +4,11 @@ class Account {
     required this.name,
     required this.type,
     required this.balance,
-    this.currency = 'GBP',
+    this.currency = 'RON',
     this.bankName,
     this.accountNumber,
     this.sortCode,
-    this.source = 'manual', // Add source field
+    this.source = 'manual',
     this.isActive = true,
     required this.createdAt,
     required this.updatedAt,
@@ -21,7 +21,7 @@ class Account {
       name: map['name'] as String,
       type: map['type'] as String,
       balance: (map['balance'] as num).toDouble(),
-      currency: map['currency'] as String? ?? 'GBP',
+      currency: map['currency'] as String? ?? 'RON',
       bankName: map['bank_name'] as String?,
       accountNumber: map['account_number'] as String?,
       sortCode: map['sort_code'] as String?,
diff --git a/lib/core/models/database/transaction.dart b/lib/core/models/database/transaction.dart
index e8019a7..69e3a96 100644
--- a/lib/core/models/database/transaction.dart
+++ b/lib/core/models/database/transaction.dart
@@ -3,6 +3,7 @@ class Transaction {
   const Transaction({
     required this.id,
     required this.accountId,
+    required this.accountCurrency,
     this.categoryId,
     required this.amount,
     required this.description,
@@ -20,6 +21,7 @@ class Transaction {
     return Transaction(
       id: map['id'] as String,
       accountId: map['account_id'] as String,
+      accountCurrency: map['account_currency'] as String? ?? 'RON',
       categoryId: map['category_id'] as String?,
       amount: (map['amount'] as num).toDouble(),
       description: map['description'] as String,
@@ -42,6 +44,7 @@ class Transaction {
   }
   final String id;
   final String accountId;
+  final String accountCurrency;
   final String? categoryId;
   final double amount;
   final String description;
@@ -58,6 +61,7 @@ class Transaction {
     return <String, dynamic>{
       'id': id,
       'account_id': accountId,
+      'account_currency': accountCurrency,
       'category_id': categoryId,
       'amount': amount,
       'description': description,
@@ -75,6 +79,7 @@ class Transaction {
   Transaction copyWith({
     String? id,
     String? accountId,
+    String? accountCurrency,
     String? categoryId,
     double? amount,
     String? description,
@@ -90,6 +95,7 @@ class Transaction {
     return Transaction(
       id: id ?? this.id,
       accountId: accountId ?? this.accountId,
+      accountCurrency: accountCurrency ?? this.accountCurrency,
       categoryId: categoryId ?? this.categoryId,
       amount: amount ?? this.amount,
       description: description ?? this.description,
diff --git a/lib/core/services/secure_storage/currency_storage_service.dart b/lib/core/services/secure_storage/currency_storage_service.dart
index bb83957..53f0c5f 100644
--- a/lib/core/services/secure_storage/currency_storage_service.dart
+++ b/lib/core/services/secure_storage/currency_storage_service.dart
@@ -11,24 +11,38 @@ class CurrencyStorageService implements ICurrencyStorageService {
   static const String _baseCurrencyKey = 'user_base_currency';
   static const String _exchangeRatesPrefix = 'exchange_rates_';
   static const String _lastUpdatePrefix = 'rates_last_update_';
-  static const String _defaultBaseCurrency = 'GBP';
+  static const String _defaultBaseCurrency = 'RON';
 
   @override
   Future<String> getBaseCurrency() async {
-    final String? storedCurrency = await _storage.read(_baseCurrencyKey);
-    return storedCurrency ?? _defaultBaseCurrency;
+    try {
+      final String? storedCurrency = await _storage.read(_baseCurrencyKey);
+      final String currency = storedCurrency ?? _defaultBaseCurrency;
+
+      return currency.toUpperCase();
+    } catch (e) {
+      return _defaultBaseCurrency;
+    }
   }
 
   @override
   Future<void> setBaseCurrency(String currencyCode) async {
-    await _storage.write(_baseCurrencyKey, currencyCode.toUpperCase());
+    try {
+      await _storage.write(_baseCurrencyKey, currencyCode.toUpperCase());
+    } catch (e) {
+      rethrow;
+    }
   }
 
   @override
   Future<void> setExchangeRates(String baseCurrency, Map<String, double> rates) async {
-    final String key = _exchangeRatesPrefix + baseCurrency.toLowerCase();
-    final String jsonString = json.encode(rates);
-    await _storage.write(key, jsonString);
+    try {
+      final String key = _exchangeRatesPrefix + baseCurrency.toLowerCase();
+      final String jsonString = json.encode(rates);
+      await _storage.write(key, jsonString);
+    } catch (e) {
+      rethrow;
+    }
   }
 
   @override
@@ -37,12 +51,16 @@ class CurrencyStorageService implements ICurrencyStorageService {
       final String key = _exchangeRatesPrefix + baseCurrency.toLowerCase();
       final String? jsonString = await _storage.read(key);
       
-      if (jsonString == null) {
+      if (jsonString == null || jsonString.isEmpty) {
         return null;
       }
 
-      final Map<String, dynamic> jsonMap = json.decode(jsonString) as Map<String, dynamic>;
-      return jsonMap.map((String key, dynamic value) => MapEntry<String, double>(
+      final dynamic decoded = json.decode(jsonString);
+      if (decoded is! Map<String, dynamic>) {
+        return null;
+      }
+      
+      return decoded.map((String key, dynamic value) => MapEntry<String, double>(
         key,
         (value as num).toDouble(),
       ));
@@ -53,8 +71,12 @@ class CurrencyStorageService implements ICurrencyStorageService {
 
   @override
   Future<void> setLastRatesUpdate(String baseCurrency, DateTime timestamp) async {
-    final String key = _lastUpdatePrefix + baseCurrency.toLowerCase();
-    await _storage.write(key, timestamp.toIso8601String());
+    try {
+      final String key = _lastUpdatePrefix + baseCurrency.toLowerCase();
+      await _storage.write(key, timestamp.toIso8601String());
+    } catch (e) {
+      rethrow;
+    }
   }
 
   @override
@@ -63,7 +85,7 @@ class CurrencyStorageService implements ICurrencyStorageService {
       final String key = _lastUpdatePrefix + baseCurrency.toLowerCase();
       final String? timestampString = await _storage.read(key);
       
-      if (timestampString == null) {
+      if (timestampString == null || timestampString.isEmpty) {
         return null;
       }
 
diff --git a/lib/features/accounts/models/add_account_state.dart b/lib/features/accounts/models/add_account_state.dart
index 872bd7f..f3bb03f 100644
--- a/lib/features/accounts/models/add_account_state.dart
+++ b/lib/features/accounts/models/add_account_state.dart
@@ -8,7 +8,7 @@ class AddAccountState {
     this.name = '',
     this.type = 'current',
     this.balance = 0.0,
-    this.currency = 'GBP',
+    this.currency = 'RON',
     this.bankName,
     this.accountNumber,
     this.sortCode,
diff --git a/lib/features/accounts/models/edit_account_state.dart b/lib/features/accounts/models/edit_account_state.dart
index 5d27659..3b1e008 100644
--- a/lib/features/accounts/models/edit_account_state.dart
+++ b/lib/features/accounts/models/edit_account_state.dart
@@ -6,7 +6,7 @@ class EditAccountState {
     this.name = '',
     this.type = 'current',
     this.balance = 0.0,
-    this.currency = 'GBP',
+    this.currency = 'RON',
     this.bankName,
     this.accountNumber,
     this.sortCode,
diff --git a/lib/features/accounts/ui/screens/accounts_screen.dart b/lib/features/accounts/ui/screens/accounts_screen.dart
index b713409..5b597ac 100644
--- a/lib/features/accounts/ui/screens/accounts_screen.dart
+++ b/lib/features/accounts/ui/screens/accounts_screen.dart
@@ -6,6 +6,8 @@ import '../../../../../core/models/database/account.dart';
 import '../../../../../shared/widgets/navigation/swipe_navigation_wrapper.dart';
 import '../../../../../shared/widgets/states/error_state.dart';
 import '../../../../../shared/widgets/states/loading_state.dart';
+import '../../../../core/providers/currency/currency_exchange_service_provider.dart';
+import '../../../../shared/utils/currency_utils.dart';
 import '../../providers/accounts_provider.dart';
 import '../widgets/accounts_view.dart';
 
@@ -18,11 +20,15 @@ class AccountsScreen extends ConsumerStatefulWidget {
 
 class _AccountsScreenState extends ConsumerState<AccountsScreen> {
   final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey = GlobalKey<RefreshIndicatorState>();
+  String _currentCurrency = 'RON';
 
   @override
   void initState() {
     super.initState();
-    Future<void>.microtask(() => ref.read(accountsProvider.notifier).loadAccounts());
+    Future<void>.microtask(() async {
+      _currentCurrency = await ref.read(currencyExchangeServiceProvider).getBaseCurrency();
+      await ref.read(accountsProvider.notifier).loadAccounts();
+    });
   }
 
   @override
@@ -74,6 +80,7 @@ class _AccountsScreenState extends ConsumerState<AccountsScreen> {
           pathParameters: <String, String>{'accountId': account.id},
         ),
         onAddAccount: () => context.pushNamed('add-account'),
+        currentCurrency: CurrencyUtils.getCurrencySymbol(_currentCurrency),
       ),
     );
   }
diff --git a/lib/features/accounts/ui/widgets/account_details_view.dart b/lib/features/accounts/ui/widgets/account_details_view.dart
index 6560024..f4ff5fb 100644
--- a/lib/features/accounts/ui/widgets/account_details_view.dart
+++ b/lib/features/accounts/ui/widgets/account_details_view.dart
@@ -6,6 +6,7 @@ import 'package:go_router/go_router.dart';
 
 import '../../../../core/models/database/account.dart';
 import '../../../../core/models/database/transaction.dart';
+import '../../../../core/providers/currency/currency_exchange_service_provider.dart';
 import '../../../../core/providers/database/storage/transaction_storage_service_provider.dart';
 import '../../../../core/theme/design_tokens/design_tokens.dart';
 import '../../../../shared/providers/ui/balance_visibility_provider.dart';
@@ -37,11 +38,13 @@ class AccountDetailsView extends ConsumerStatefulWidget {
 
 class _AccountDetailsViewState extends ConsumerState<AccountDetailsView> {
   late final Future<List<Transaction>> _accountTransactions;
+  late final String _currentCurrency;
 
   @override
-  void initState() {
+  Future<void> initState() async {
     super.initState();
     _accountTransactions = ref.read(transactionStorageProvider).getAllByAccount(widget.account.id);
+    _currentCurrency = await ref.read(currencyExchangeServiceProvider).getBaseCurrency();
   }
 
   @override
@@ -97,6 +100,7 @@ class _AccountDetailsViewState extends ConsumerState<AccountDetailsView> {
                       current.state = !current.state;
                     },
                     showActiveAccountsCount: false,
+                    currentCurrency: _currentCurrency,
                   ).animate().slideY(begin: -0.3, delay: 100.ms).fadeIn(),
 
                   const Gap(DesignTokens.spacingMd),
diff --git a/lib/features/accounts/ui/widgets/accounts_view.dart b/lib/features/accounts/ui/widgets/accounts_view.dart
index 6fa76b7..1092ed6 100644
--- a/lib/features/accounts/ui/widgets/accounts_view.dart
+++ b/lib/features/accounts/ui/widgets/accounts_view.dart
@@ -11,16 +11,19 @@ import '../../../../shared/providers/ui/balance_visibility_provider.dart';
 import '../../../../shared/widgets/dashboard/account_balance_card.dart';
 
 class AccountsView extends ConsumerWidget {
+  
   const AccountsView({
     super.key,
     required this.accounts,
     required this.onAccountTap,
     required this.onAddAccount,
+    required this.currentCurrency,
   });
 
   final List<Account> accounts;
   final void Function(Account account) onAccountTap;
   final VoidCallback onAddAccount;
+  final String currentCurrency;
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
@@ -49,6 +52,7 @@ class AccountsView extends ConsumerWidget {
                 final StateController<bool> notifier = ref.read(balanceVisibilityProvider.notifier);
                 notifier.state = !notifier.state;
               },
+              currentCurrency: currentCurrency,
             ).animate().slideY(begin: -0.3, delay: 100.ms).fadeIn(),
           ),
         ),
diff --git a/lib/features/dashboard/providers/dashboard_provider.dart b/lib/features/dashboard/providers/dashboard_provider.dart
index 4177978..b7cdf59 100644
--- a/lib/features/dashboard/providers/dashboard_provider.dart
+++ b/lib/features/dashboard/providers/dashboard_provider.dart
@@ -128,8 +128,8 @@ class DashboardNotifier extends StateNotifier<DashboardState> {
     for (final Transaction transaction in monthlyExpenses) {
       try {
         final Account? account = await _accountStorage.get(transaction.accountId);
-        final String transactionCurrency = account?.currency ?? 'GBP';
-        
+        final String transactionCurrency = account?.currency ?? 'RON';
+
         if (transactionCurrency.toUpperCase() == baseCurrency.toUpperCase()) {
           totalSpending += transaction.amount.abs();
         } else {
diff --git a/lib/features/dashboard/ui/screens/dashboard_screen.dart b/lib/features/dashboard/ui/screens/dashboard_screen.dart
index bd9ed36..af6bf3d 100644
--- a/lib/features/dashboard/ui/screens/dashboard_screen.dart
+++ b/lib/features/dashboard/ui/screens/dashboard_screen.dart
@@ -10,7 +10,9 @@ import '../../../../../shared/utils/ui_utils.dart';
 import '../../../../../shared/widgets/navigation/swipe_navigation_wrapper.dart';
 import '../../../../../shared/widgets/states/error_state.dart';
 import '../../../../../shared/widgets/states/loading_state.dart';
+import '../../../../core/providers/currency/currency_exchange_service_provider.dart';
 import '../../../../shared/providers/ui/balance_visibility_provider.dart';
+import '../../../../shared/utils/currency_utils.dart';
 import '../../../../shared/widgets/currency/currency_selector_button.dart';
 import '../../../../shared/widgets/dashboard/account_balance_card.dart';
 import '../../models/dashboard_state.dart';
@@ -29,11 +31,15 @@ class DashboardScreen extends ConsumerStatefulWidget {
 
 class _DashboardScreenState extends ConsumerState<DashboardScreen> {
   final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey = GlobalKey<RefreshIndicatorState>();
+  String _currentCurrency = 'RON';
 
   @override
   void initState() {
     super.initState();
-    Future<void>.microtask(() => ref.read(dashboardProvider.notifier).loadDashboardData());
+    Future<void>.microtask(() async {
+      _currentCurrency = await ref.read(currencyExchangeServiceProvider).getBaseCurrency();
+      await ref.read(dashboardProvider.notifier).loadDashboardData();
+    });
   }
 
   @override
@@ -44,29 +50,6 @@ class _DashboardScreenState extends ConsumerState<DashboardScreen> {
     return SwipeNavigationWrapper(
       currentRoute: 'dashboard',
       child: Scaffold(
-        appBar: AppBar(
-          title: Text(
-            'TrackFi',
-            style: theme.textTheme.headlineSmall?.copyWith(
-              fontWeight: FontWeight.w700,
-            ),
-          ),
-          backgroundColor: theme.colorScheme.surface,
-          elevation: 0,
-          actions: <Widget>[
-            const CurrencySelectorButton(),
-            const Gap(DesignTokens.spacingXs),
-            
-            IconButton(
-              icon: const Icon(Icons.notifications_outlined),
-              onPressed: () => UiUtils.showComingSoon(context, 'Notifications'),
-            ),
-            IconButton(
-              icon: const Icon(Icons.account_circle_outlined),
-              onPressed: () => context.goNamed('settings'),
-            ),
-          ],
-        ),
         body: RefreshIndicator(
           key: _refreshIndicatorKey,
           onRefresh: () => _handleRefresh(),
@@ -95,45 +78,140 @@ class _DashboardScreenState extends ConsumerState<DashboardScreen> {
 
     return CustomScrollView(
       slivers: <Widget>[
-        SliverToBoxAdapter(
-          child: Padding(
-            padding: const EdgeInsets.all(DesignTokens.spacingMd),
-            child: Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
-              children: <Widget>[
-                // Greeting and Sync Status
-                Row(
-                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                  children: <Widget>[
-                    Expanded(
-                      child: Column(
-                        crossAxisAlignment: CrossAxisAlignment.start,
+        // Custom App Bar
+        SliverAppBar(
+          expandedHeight: 140,
+          floating: true,
+          backgroundColor: Colors.transparent,
+          elevation: 0,
+          flexibleSpace: FlexibleSpaceBar(
+            background: Container(
+              decoration: BoxDecoration(
+                gradient: LinearGradient(
+                  begin: Alignment.topLeft,
+                  end: Alignment.bottomRight,
+                  colors: <Color>[
+                    theme.colorScheme.primaryContainer.withOpacity(0.1),
+                    theme.colorScheme.secondaryContainer.withOpacity(0.05),
+                  ],
+                ),
+              ),
+              child: SafeArea(
+                child: Padding(
+                  padding: const EdgeInsets.all(DesignTokens.spacingMd),
+                  child: Column(
+                    children: <Widget>[
+                      // Top Header Row
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                         children: <Widget>[
-                          Text(
-                            DateUtils.getGreeting(),
-                            style: theme.textTheme.titleLarge?.copyWith(
-                              fontWeight: FontWeight.w600,
-                            ),
+                          // App Title
+                          Row(
+                            children: <Widget>[
+                              Container(
+                                padding: const EdgeInsets.all(8),
+                                decoration: BoxDecoration(
+                                  gradient: LinearGradient(
+                                    colors: <Color>[
+                                      theme.colorScheme.primary,
+                                      theme.colorScheme.secondary,
+                                    ],
+                                  ),
+                                  borderRadius: BorderRadius.circular(DesignTokens.radiusMd),
+                                ),
+                                child: Icon(
+                                  Icons.account_balance_wallet_rounded,
+                                  color: theme.colorScheme.onPrimary,
+                                  size: 24,
+                                ),
+                              ),
+                              const Gap(DesignTokens.spacingSm),
+                              Column(
+                                crossAxisAlignment: CrossAxisAlignment.start,
+                                children: <Widget>[
+                                  Text(
+                                    'TrackFi',
+                                    style: theme.textTheme.titleLarge?.copyWith(
+                                      fontWeight: FontWeight.w800,
+                                      color: theme.colorScheme.primary,
+                                    ),
+                                  ),
+                                  Text(
+                                    DateUtils.getGreeting(),
+                                    style: theme.textTheme.bodySmall?.copyWith(
+                                      color: theme.colorScheme.onSurface.withOpacity(0.7),
+                                    ),
+                                  ),
+                                ],
+                              ),
+                            ],
                           ).animate().slideX(begin: -0.3, delay: 100.ms).fadeIn(),
+                          
+                          // Action Buttons
+                          Row(
+                            children: <Widget>[
+                              const CurrencySelectorButton(),
+                              const Gap(DesignTokens.spacingXs),
+                              Container(
+                                decoration: BoxDecoration(
+                                  color: theme.colorScheme.surfaceVariant.withOpacity(0.5),
+                                  borderRadius: BorderRadius.circular(DesignTokens.radiusMd),
+                                ),
+                                child: IconButton(
+                                  icon: const Icon(Icons.notifications_outlined),
+                                  onPressed: () => UiUtils.showComingSoon(context, 'Notifications'),
+                                ),
+                              ),
+                              const Gap(DesignTokens.spacingXs),
+                              Container(
+                                decoration: BoxDecoration(
+                                  color: theme.colorScheme.surfaceVariant.withOpacity(0.5),
+                                  borderRadius: BorderRadius.circular(DesignTokens.radiusMd),
+                                ),
+                                child: IconButton(
+                                  icon: const Icon(Icons.account_circle_outlined),
+                                  onPressed: () => context.goNamed('settings'),
+                                ),
+                              ),
+                            ],
+                          ).animate().slideX(begin: 0.3, delay: 150.ms).fadeIn(),
+                        ],
+                      ),
+                      
+                      const Gap(DesignTokens.spacingSm),
+                      
+                      // Sync Status Row
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                        children: <Widget>[
                           Text(
                             "Here's your financial overview",
                             style: theme.textTheme.bodyMedium?.copyWith(
                               color: theme.colorScheme.onSurface.withOpacity(0.7),
                             ),
                           ).animate().slideX(begin: -0.3, delay: 200.ms).fadeIn(),
+                          
+                          SyncStatusCard(
+                            syncStatus: state.lastSyncStatus,
+                            lastRefresh: state.lastRefresh,
+                          ).animate().slideX(begin: 0.3, delay: 250.ms).fadeIn(),
                         ],
                       ),
-                    ),
-                    SyncStatusCard(
-                      syncStatus: state.lastSyncStatus,
-                      lastRefresh: state.lastRefresh,
-                    ).animate().slideX(begin: 0.3, delay: 150.ms).fadeIn(),
-                  ],
+                    ],
+                  ),
                 ),
-                
-                const Gap(DesignTokens.spacingLg),
-                
-                // Account Balance Overview - Now shows converted amounts!
+              ),
+            ),
+          ),
+        ),
+
+        SliverToBoxAdapter(
+          child: Padding(
+            padding: const EdgeInsets.all(DesignTokens.spacingMd),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: <Widget>[
+                // Account Balance Overview
                 AccountBalanceCard(
                   totalBalance: state.totalBalance,
                   accounts: state.accounts,
@@ -142,9 +220,10 @@ class _DashboardScreenState extends ConsumerState<DashboardScreen> {
                     final StateController<bool> current = ref.read(balanceVisibilityProvider.notifier);
                     current.state = !current.state;
                   },
+                  currentCurrency: CurrencyUtils.getCurrencySymbol(_currentCurrency),
                 ).animate().slideY(begin: 0.3, delay: 300.ms).fadeIn(),
                 
-                const Gap(DesignTokens.spacingMd),
+                const Gap(DesignTokens.spacingLg),
                 
                 // Quick Actions
                 QuickActionsRow(
@@ -152,19 +231,26 @@ class _DashboardScreenState extends ConsumerState<DashboardScreen> {
                   onViewTransactions: () => context.goNamed('transactions'),
                 ).animate().slideY(begin: 0.3, delay: 400.ms).fadeIn(),
                 
-                const Gap(DesignTokens.spacingMd),
+                const Gap(DesignTokens.spacingLg),
                 
-                // Spending Overview - Now shows converted amounts!
-                SpendingOverviewCard(
-                  monthlySpending: state.monthlySpending,
-                  recentTransactions: state.recentTransactions,
-                  onToggleVisibility: () {
-                    final StateController<bool> current = ref.read(balanceVisibilityProvider.notifier);
-                    current.state = !current.state;
-                  },
+                // Financial Insights Row
+                Row(
+                  children: <Widget>[
+                    Expanded(
+                      child: SpendingOverviewCard(
+                        monthlySpending: state.monthlySpending,
+                        recentTransactions: state.recentTransactions,
+                        onToggleVisibility: () {
+                          final StateController<bool> current = ref.read(balanceVisibilityProvider.notifier);
+                          current.state = !current.state;
+                        },
+                        currentCurrency: CurrencyUtils.getCurrencySymbol(_currentCurrency),
+                      ),
+                    ),
+                  ],
                 ).animate().slideY(begin: 0.3, delay: 500.ms).fadeIn(),
                 
-                const Gap(DesignTokens.spacingMd),
+                const Gap(DesignTokens.spacingLg),
                 
                 // Recent Transactions
                 RecentTransactionsCard(
@@ -178,6 +264,9 @@ class _DashboardScreenState extends ConsumerState<DashboardScreen> {
                 ).animate().slideY(begin: 0.3, delay: 600.ms).fadeIn(),
                 
                 const Gap(DesignTokens.spacingXl),
+                
+                // Bottom Spacer for FAB
+                const Gap(DesignTokens.spacingXl),
               ],
             ),
           ),
diff --git a/lib/features/dashboard/ui/widgets/spending_metric.dart b/lib/features/dashboard/ui/widgets/spending_metric.dart
index 32c48b9..a29448b 100644
--- a/lib/features/dashboard/ui/widgets/spending_metric.dart
+++ b/lib/features/dashboard/ui/widgets/spending_metric.dart
@@ -34,7 +34,7 @@ class SpendingMetric extends StatelessWidget {
         ),
         const Gap(DesignTokens.spacing2xs),
         Text(
-          visible ? CurrencyUtils.formatAmount(amount) : '****',
+          visible ? CurrencyUtils.formatAmount(amount, currency: currency) : '****',
           style: AppTypography.moneyMedium.copyWith(
             color: theme.colorScheme.onSurface,
           ),
diff --git a/lib/features/dashboard/ui/widgets/spending_overview_card.dart b/lib/features/dashboard/ui/widgets/spending_overview_card.dart
index 5d6800e..c377bf5 100644
--- a/lib/features/dashboard/ui/widgets/spending_overview_card.dart
+++ b/lib/features/dashboard/ui/widgets/spending_overview_card.dart
@@ -13,11 +13,13 @@ class SpendingOverviewCard extends ConsumerWidget {
     required this.monthlySpending,
     required this.recentTransactions,
     required this.onToggleVisibility,
+    required this.currentCurrency,
   });
 
   final double monthlySpending;
   final List<Transaction> recentTransactions;
   final VoidCallback onToggleVisibility;
+  final String currentCurrency;
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
@@ -44,7 +46,7 @@ class SpendingOverviewCard extends ConsumerWidget {
                   child: SpendingMetric(
                     label: 'This Month',
                     amount: monthlySpending,
-                    currency: '£',
+                    currency: currentCurrency,
                     visible: showBalance,
                   ),
                 ),
@@ -53,7 +55,7 @@ class SpendingOverviewCard extends ConsumerWidget {
                   child: SpendingMetric(
                     label: 'This Week',
                     amount: weeklySpending,
-                    currency: '£',
+                    currency: currentCurrency,
                     visible: showBalance,
                   ),
                 ),
diff --git a/lib/features/transactions/models/add_transaction_state.dart b/lib/features/transactions/models/add_transaction_state.dart
index ec028d2..f53155b 100644
--- a/lib/features/transactions/models/add_transaction_state.dart
+++ b/lib/features/transactions/models/add_transaction_state.dart
@@ -5,6 +5,7 @@ import '../../../core/models/database/transaction.dart';
 class AddTransactionState {
   const AddTransactionState({
     this.accountId,
+    this.accountCurrency,
     this.amount = 0.0,
     this.description = '',
     this.reference,
@@ -18,6 +19,7 @@ class AddTransactionState {
   static const Uuid _uuid = Uuid();
 
   final String? accountId;
+  final String? accountCurrency;
   final double amount;
   final String description;
   final String? reference;
@@ -29,6 +31,7 @@ class AddTransactionState {
 
   AddTransactionState copyWith({
     String? accountId,
+    String? accountCurrency,
     double? amount,
     String? description,
     String? reference,
@@ -40,6 +43,7 @@ class AddTransactionState {
   }) {
     return AddTransactionState(
       accountId: accountId ?? this.accountId,
+      accountCurrency: accountCurrency ?? this.accountCurrency,
       amount: amount ?? this.amount,
       description: description ?? this.description,
       reference: reference ?? this.reference,
@@ -57,6 +61,9 @@ class AddTransactionState {
     if (accountId == null || accountId!.isEmpty) {
       return 'Please select an account';
     }
+    if (accountCurrency == null || accountCurrency!.isEmpty) {
+      return 'Account currency is required';
+    }
     if (amount <= 0) {
       return 'Amount must be greater than £0.00';
     }
@@ -85,6 +92,7 @@ class AddTransactionState {
     return Transaction(
       id: transactionId,
       accountId: accountId!,
+      accountCurrency: accountCurrency!,
       categoryId: categoryId,
       amount: amount,
       description: description.trim(),
diff --git a/lib/features/transactions/models/edit_transaction_state.dart b/lib/features/transactions/models/edit_transaction_state.dart
index 1202bbf..d3fef12 100644
--- a/lib/features/transactions/models/edit_transaction_state.dart
+++ b/lib/features/transactions/models/edit_transaction_state.dart
@@ -4,6 +4,7 @@ class EditTransactionState {
   const EditTransactionState({
     this.transactionId,
     this.accountId,
+    this.accountCurrency,
     this.amount = 0.0,
     this.description = '',
     this.reference,
@@ -20,6 +21,7 @@ class EditTransactionState {
     return EditTransactionState(
       transactionId: tx.id,
       accountId: tx.accountId,
+      accountCurrency: tx.accountCurrency,
       amount: tx.amount,
       description: tx.description,
       reference: tx.reference,
@@ -32,6 +34,7 @@ class EditTransactionState {
 
   final String? transactionId;
   final String? accountId;
+  final String? accountCurrency;
   final double amount;
   final String description;
   final String? reference;
@@ -47,6 +50,9 @@ class EditTransactionState {
   String get effectiveAccountId =>
       accountId ?? originalTransaction?.accountId ?? '';
 
+  String get effectiveAccountCurrency =>
+      originalTransaction?.accountCurrency ?? '';
+
   double get effectiveAmount => (amount == 0.0 && originalTransaction != null)
       ? originalTransaction!.amount
       : amount;
@@ -76,6 +82,7 @@ class EditTransactionState {
   EditTransactionState copyWith({
     String? transactionId,
     String? accountId,
+    String? accountCurrency,
     double? amount,
     String? description,
     String? reference,
@@ -90,6 +97,7 @@ class EditTransactionState {
     return EditTransactionState(
       transactionId: transactionId ?? this.transactionId,
       accountId: accountId ?? this.accountId,
+      accountCurrency: accountCurrency ?? this.accountCurrency,
       amount: amount ?? this.amount,
       description: description ?? this.description,
       reference: reference ?? this.reference,
@@ -111,6 +119,9 @@ class EditTransactionState {
     if (effectiveAccountId.isEmpty) {
       return false;
     }
+    if (effectiveAccountCurrency.isEmpty) {
+      return false;
+    }
     if (effectiveAmount <= 0) {
       return false;
     }
@@ -133,6 +144,7 @@ class EditTransactionState {
     return Transaction(
       id: originalTransaction!.id,
       accountId: effectiveAccountId,
+      accountCurrency: effectiveAccountCurrency,
       categoryId: effectiveCategoryId,
       amount: effectiveAmount,
       description: effectiveDescription.trim(),
@@ -163,17 +175,19 @@ class EditTransactionState {
     }
     final bool changed =
         effectiveAccountId != originalTransaction!.accountId ||
-            effectiveAmount != originalTransaction!.amount ||
-            effectiveDescription != originalTransaction!.description ||
-            effectiveReference != originalTransaction!.reference ||
-            effectiveDate != originalTransaction!.transactionDate ||
-            effectiveType != originalTransaction!.type ||
-            effectiveCategoryId != originalTransaction!.categoryId;
+        effectiveAccountCurrency != originalTransaction!.accountCurrency ||
+        effectiveAmount != originalTransaction!.amount ||
+        effectiveDescription != originalTransaction!.description ||
+        effectiveReference != originalTransaction!.reference ||
+        effectiveDate != originalTransaction!.transactionDate ||
+        effectiveType != originalTransaction!.type ||
+        effectiveCategoryId != originalTransaction!.categoryId;
     return copyWith(hasChanges: changed);
   }
 
   EditTransactionState updateField({
     String? accountId,
+    String? accountCurrency,
     double? amount,
     String? description,
     String? reference,
@@ -183,6 +197,7 @@ class EditTransactionState {
   }) {
     return copyWith(
       accountId: accountId ?? this.accountId,
+      accountCurrency: accountCurrency ?? this.accountCurrency,
       amount: amount ?? this.amount,
       description: description ?? this.description,
       reference: reference ?? this.reference,
diff --git a/lib/shared/utils/currency_utils.dart b/lib/shared/utils/currency_utils.dart
index ea89524..bcf36d0 100644
--- a/lib/shared/utils/currency_utils.dart
+++ b/lib/shared/utils/currency_utils.dart
@@ -89,7 +89,7 @@ class CurrencyUtils {
   /// Get currency for a specific account
   static String getCurrencyForAccount(String? accountId, List<Account>? accounts) {
     if (accounts == null || accountId == null) {
-      return 'GBP';
+      return 'RON';
     }
     
     final Account? account = accounts.cast<Account?>().firstWhere(
@@ -97,7 +97,7 @@ class CurrencyUtils {
       orElse: () => null,
     );
     
-    return account?.currency ?? 'GBP';
+    return account?.currency ?? 'RON';
   }
 
   /// Format amount with currency symbol (async version using currencies.json)
@@ -107,7 +107,7 @@ class CurrencyUtils {
   }
 
   /// Format amount with currency symbol (sync version with fallbacks)
-  static String formatAmount(double amount, {String currency = '£'}) {
+  static String formatAmount(double amount, {String currency = 'lei'}) {
     return '$currency${amount.toStringAsFixed(2)}';
   }
 
@@ -125,7 +125,7 @@ class CurrencyUtils {
   }
 
   /// Format large amounts with abbreviations (sync version)
-  static String formatLargeAmount(double amount, {String currency = '£'}) {
+  static String formatLargeAmount(double amount, {String currency = 'lei'}) {
     if (amount.abs() >= 1000000) {
       return '$currency${(amount / 1000000).toStringAsFixed(1)}M';
     } else if (amount.abs() >= 1000) {
@@ -136,7 +136,7 @@ class CurrencyUtils {
   }
 
   /// Format amount for accounting display (with parentheses for negative)
-  static String formatAccountingAmount(double amount, {String currency = '£'}) {
+  static String formatAccountingAmount(double amount, {String currency = 'lei'}) {
     if (amount < 0) {
       return '(${formatAmount(amount.abs(), currency: currency)})';
     }
@@ -166,6 +166,8 @@ class CurrencyUtils {
         return 'kr';
       case 'NOK':
         return 'kr';
+      case 'RON':
+        return 'lei';
       default:
         return currencyCode;
     }
diff --git a/lib/shared/widgets/currency/currency_selector_button.dart b/lib/shared/widgets/currency/currency_selector_button.dart
index 54184a3..2a7048f 100644
--- a/lib/shared/widgets/currency/currency_selector_button.dart
+++ b/lib/shared/widgets/currency/currency_selector_button.dart
@@ -3,150 +3,250 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:gap/gap.dart';
 
 import '../../../core/contracts/services/currency/i_currency_exchange_service.dart';
+import '../../../core/logging/log.dart';
 import '../../../core/providers/currency/currency_exchange_service_provider.dart';
 import '../../../core/theme/design_tokens/design_tokens.dart';
 import '../../../features/accounts/providers/accounts_provider.dart';
 import '../../../features/dashboard/providers/dashboard_provider.dart';
+import '../../utils/currency_utils.dart';
 import 'currency_picker.dart';
 
-class CurrencySelectorButton extends ConsumerWidget {
+class CurrencySelectorButton extends ConsumerStatefulWidget {
   const CurrencySelectorButton({super.key});
 
   @override
-  Widget build(BuildContext context, WidgetRef ref) {
+  ConsumerState<CurrencySelectorButton> createState() => _CurrencySelectorButtonState();
+}
+
+class _CurrencySelectorButtonState extends ConsumerState<CurrencySelectorButton> {
+  String? _currentCurrency;
+  bool _isLoading = false;
+
+  @override
+  void initState() {
+    super.initState();
+    _loadCurrentCurrency();
+  }
+
+  Future<void> _loadCurrentCurrency() async {
+    final ICurrencyExchangeService currencyService = ref.read(currencyExchangeServiceProvider);
+
+    try {
+      final String currency = await currencyService.getBaseCurrency();
+      setState(() {
+        _currentCurrency = currency;
+      });
+    } catch (_) {
+      setState(() {
+        _currentCurrency = 'RON';
+      });
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
     final ThemeData theme = Theme.of(context);
-    
-    return FutureBuilder<String>(
-      future: ref.read(currencyExchangeServiceProvider).getBaseCurrency(),
-      builder: (BuildContext context, AsyncSnapshot<String> snapshot) {
-        final String currentCurrency = snapshot.data ?? 'GBP';
-        final bool isLoading = snapshot.connectionState == ConnectionState.waiting;
-        
-        return InkWell(
-          onTap: isLoading ? null : () => _showCurrencyPicker(context, ref, currentCurrency),
-          borderRadius: BorderRadius.circular(DesignTokens.radiusSm),
-          child: Container(
+
+    return Container(
+      decoration: BoxDecoration(
+        gradient: LinearGradient(
+          begin: Alignment.topLeft,
+          end: Alignment.bottomRight,
+          colors: <Color>[
+            theme.colorScheme.primaryContainer.withOpacity(0.8),
+            theme.colorScheme.secondaryContainer.withOpacity(0.6),
+          ],
+        ),
+        borderRadius: BorderRadius.circular(DesignTokens.radiusLg),
+        border: Border.all(
+          color: theme.colorScheme.outline.withOpacity(0.2),
+          width: 0.5,
+        ),
+        boxShadow: <BoxShadow>[
+          BoxShadow(
+            color: theme.colorScheme.primary.withOpacity(0.1),
+            blurRadius: 8,
+            offset: const Offset(0, 2),
+          ),
+        ],
+      ),
+      child: Material(
+        color: Colors.transparent,
+        child: InkWell(
+          onTap: _isLoading ? null : () => _showCurrencyPicker(context),
+          borderRadius: BorderRadius.circular(DesignTokens.radiusLg),
+          child: Padding(
             padding: const EdgeInsets.symmetric(
-              horizontal: DesignTokens.spacingXs,
-              vertical: DesignTokens.spacing2xs,
-            ),
-            decoration: BoxDecoration(
-              color: theme.colorScheme.primaryContainer.withOpacity(0.1),
-              borderRadius: BorderRadius.circular(DesignTokens.radiusSm),
-              border: Border.all(
-                color: theme.colorScheme.primary.withOpacity(0.2),
-              ),
+              horizontal: DesignTokens.spacingSm,
+              vertical: DesignTokens.spacingXs,
             ),
             child: Row(
               mainAxisSize: MainAxisSize.min,
               children: <Widget>[
-                if (isLoading) 
+                if (_isLoading)
                   SizedBox(
-                    width: 12,
-                    height: 12,
+                    width: 16,
+                    height: 16,
                     child: CircularProgressIndicator(
-                      strokeWidth: 1.5,
+                      strokeWidth: 2,
                       color: theme.colorScheme.primary,
                     ),
                   )
-                else
+                else ...<Widget>[
+                  Container(
+                    padding: const EdgeInsets.all(4),
+                    decoration: BoxDecoration(
+                      color: theme.colorScheme.primary.withOpacity(0.1),
+                      borderRadius: BorderRadius.circular(DesignTokens.radiusSm),
+                    ),
+                    child: Text(
+                      CurrencyUtils.getCurrencySymbol(_currentCurrency ?? 'RON'),
+                      style: theme.textTheme.labelMedium?.copyWith(
+                        color: theme.colorScheme.primary,
+                        fontWeight: FontWeight.w700,
+                        fontSize: 12,
+                      ),
+                    ),
+                  ),
+                  const Gap(DesignTokens.spacing2xs),
                   Text(
-                    currentCurrency,
-                    style: theme.textTheme.labelMedium?.copyWith(
+                    _currentCurrency ?? 'RON',
+                    style: theme.textTheme.labelLarge?.copyWith(
                       color: theme.colorScheme.primary,
                       fontWeight: FontWeight.w600,
                     ),
                   ),
+                ],
                 const Gap(DesignTokens.spacing2xs),
                 Icon(
                   Icons.expand_more,
-                  size: 14,
-                  color: theme.colorScheme.primary.withOpacity(0.7),
+                  size: 16,
+                  color: theme.colorScheme.primary.withOpacity(0.8),
                 ),
               ],
             ),
           ),
-        );
-      },
+        ),
+      ),
     );
   }
 
-  Future<void> _showCurrencyPicker(BuildContext context, WidgetRef ref, String currentCurrency) async {
+  Future<void> _showCurrencyPicker(BuildContext context) async {
     final String? selectedCurrency = await showModalBottomSheet<String>(
       context: context,
       isScrollControlled: true,
+      backgroundColor: Colors.transparent,
       shape: const RoundedRectangleBorder(
         borderRadius: BorderRadius.vertical(
           top: Radius.circular(DesignTokens.radiusLg),
         ),
       ),
-      builder: (_) => CurrencyPicker(
-        currentCurrency: currentCurrency,
+      builder: (_) => Container(
+        decoration: BoxDecoration(
+          color: Theme.of(context).colorScheme.surface,
+          borderRadius: const BorderRadius.vertical(
+            top: Radius.circular(DesignTokens.radiusLg),
+          ),
+        ),
+        child: CurrencyPicker(
+          currentCurrency: _currentCurrency ?? 'RON',
+        ),
       ),
     );
 
-    if(!context.mounted) {
+    if (!mounted) {
       return;
     }
 
-    if (selectedCurrency != null && selectedCurrency != currentCurrency) {
-      await _changeCurrency(context, ref, selectedCurrency);
+    if (selectedCurrency != null && selectedCurrency != _currentCurrency) {
+      await _changeCurrency(selectedCurrency);
     }
   }
 
-  Future<void> _changeCurrency(BuildContext context, WidgetRef ref, String newCurrency) async {
+  Future<void> _changeCurrency(String newCurrency) async {
     final ICurrencyExchangeService currencyService = ref.read(currencyExchangeServiceProvider);
-    
-    // Show loading indicator
-    ScaffoldMessenger.of(context).showSnackBar(
-      SnackBar(
-        content: Row(
-          children: <Widget>[
-            SizedBox(
-              width: 16,
-              height: 16,
-              child: CircularProgressIndicator(
-                strokeWidth: 2,
-                color: Theme.of(context).colorScheme.onPrimary,
-              ),
-            ),
-            const Gap(DesignTokens.spacingSm),
-            Text('Changing currency to $newCurrency...'),
-          ],
-        ),
-        backgroundColor: Theme.of(context).colorScheme.primary,
-        duration: const Duration(seconds: 3),
-      ),
-    );
+    final DashboardNotifier dashboardNotifier = ref.read(dashboardProvider.notifier);
+    final AccountsNotifier accountsNotifier = ref.read(accountsProvider.notifier);
+
+    setState(() {
+      _isLoading = true;
+    });
 
     try {
       await currencyService.setBaseCurrency(newCurrency);
-      
-      if (context.mounted) {
-        ScaffoldMessenger.of(context).hideCurrentSnackBar();
-        ScaffoldMessenger.of(context).showSnackBar(
-          SnackBar(
-            content: Text('Currency changed to $newCurrency'),
-            backgroundColor: Theme.of(context).colorScheme.primary,
-            behavior: SnackBarBehavior.floating,
-          ),
-        );
-        
-        // Trigger dashboard refresh - we'll need to invalidate providers
-        ref.invalidate(dashboardProvider);
-        ref.invalidate(accountsProvider);
+      setState(() {
+        _currentCurrency = newCurrency;
+      });
+
+      if (!mounted) {
+        return;
       }
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(
+          content: Row(
+            children: <Widget>[
+              Icon(
+                Icons.check_circle_outline,
+                color: Theme.of(context).colorScheme.onPrimary,
+                size: 20,
+              ),
+              const Gap(DesignTokens.spacingXs),
+              Text('Currency changed to $newCurrency'),
+            ],
+          ),
+          backgroundColor: Theme.of(context).colorScheme.primary,
+          behavior: SnackBarBehavior.floating,
+          duration: const Duration(seconds: 2),
+        ),
+      );
+      
+      await _refreshDataInBackground(
+        dashboardNotifier: dashboardNotifier,
+        accountsNotifier: accountsNotifier,
+      );
     } catch (e) {
-      if (context.mounted) {
-        ScaffoldMessenger.of(context).hideCurrentSnackBar();
-        ScaffoldMessenger.of(context).showSnackBar(
-          SnackBar(
-            content: Text('Failed to change currency: $e'),
-            backgroundColor: Theme.of(context).colorScheme.error,
-            behavior: SnackBarBehavior.floating,
+      if (!mounted) {
+        return;
+      }
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(
+          content: Row(
+            children: <Widget>[
+              Icon(
+                Icons.error_outline,
+                color: Theme.of(context).colorScheme.onError,
+                size: 20,
+              ),
+              const Gap(DesignTokens.spacingXs),
+              Expanded(child: Text('Failed to change currency: $e')),
+            ],
           ),
-        );
+          backgroundColor: Theme.of(context).colorScheme.error,
+          behavior: SnackBarBehavior.floating,
+        ),
+      );
+    } finally {
+      if (mounted) {
+        setState(() {
+          _isLoading = false;
+        });
       }
     }
   }
+
+  Future<void> _refreshDataInBackground({
+    required DashboardNotifier dashboardNotifier,
+    required AccountsNotifier accountsNotifier,
+  }) async {
+    try {
+      await dashboardNotifier.loadDashboardData();
+      await accountsNotifier.loadAccounts();
+    } catch (e, stackTrace) {
+      await log(
+        message: 'Failed to refresh data after currency change',
+        error: e,
+        stackTrace: stackTrace,
+      );
+    }
+  }
 }
diff --git a/lib/shared/widgets/dashboard/account_balance_card.dart b/lib/shared/widgets/dashboard/account_balance_card.dart
index 195e3a2..739ac72 100644
--- a/lib/shared/widgets/dashboard/account_balance_card.dart
+++ b/lib/shared/widgets/dashboard/account_balance_card.dart
@@ -16,6 +16,7 @@ class AccountBalanceCard extends ConsumerWidget {
     this.isLoading = false,
     this.showActiveAccountsCount = true,
     required this.onToggleVisibility,
+    required this.currentCurrency,
   });
 
   final double totalBalance;
@@ -23,6 +24,7 @@ class AccountBalanceCard extends ConsumerWidget {
   final bool isLoading;
   final bool showActiveAccountsCount;
   final VoidCallback onToggleVisibility;
+  final String currentCurrency;
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
@@ -66,7 +68,7 @@ class AccountBalanceCard extends ConsumerWidget {
               )
             else
               Text(
-                showBalance ? CurrencyUtils.formatAmount(totalBalance) : '••••••',
+                showBalance ? CurrencyUtils.formatAmount(totalBalance, currency: currentCurrency) : '••••••',
                 style: AppTypography.moneyLarge.copyWith(
                   color: theme.colorScheme.onSurface,
                 ),
diff --git a/lib/shared/widgets/input/text/currency_input_field.dart b/lib/shared/widgets/input/text/currency_input_field.dart
index 5732a07..dca4473 100644
--- a/lib/shared/widgets/input/text/currency_input_field.dart
+++ b/lib/shared/widgets/input/text/currency_input_field.dart
@@ -10,7 +10,7 @@ class CurrencyInputField extends StatelessWidget {
     required this.controller,
     required this.label,
     this.hint,
-    this.currency = 'GBP',
+    this.currency = 'RON',
     this.onChanged,
     this.enabled = true,
     this.validator,
